{"version":3,"sources":["components/ToDoForm.js","components/Todo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","addToDo","useState","id","task","completed","todo","setToDo","className","onSubmit","e","preventDefault","trim","uuid","TextField","label","name","type","value","onChange","target","Button","ToDo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","ToDoList","todos","List","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRA8BeA,MA1Bf,YAA+B,IAAXC,EAAU,EAAVA,QAAU,EACHC,mBAAS,CAC5BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJW,mBACnBC,EADmB,KACdC,EADc,KAmB1B,OACI,0BAAMC,UAAU,YAAYC,SAThC,SAAsBC,GAClBA,EAAEC,iBACCL,EAAKF,KAAKQ,SACTX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,SACvBN,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,SAMzB,kBAACU,EAAA,EAAD,CAAWC,MAAM,aAAaC,KAAK,OAAOC,KAAK,OAAOC,MAAOZ,EAAKF,KAAMe,SAdhF,SAA+BT,GAC3BH,EAAQ,2BAAKD,GAAN,IAAYF,KAAMM,EAAEU,OAAOF,YAc9B,kBAACG,EAAA,EAAD,CAAQJ,KAAK,UAAb,c,qDCJGK,MAlBf,YAAoD,IAApChB,EAAmC,EAAnCA,KAAMiB,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,WAQlC,OACI,kBAACC,EAAA,EAAD,CAAUC,MAAO,CAACC,QAAS,SAC3B,kBAACC,EAAA,EAAD,CAAUC,QAAWvB,EAAKD,UAAYyB,QAR1C,WACIP,EAAejB,EAAKH,OAQpB,kBAAC4B,EAAA,EAAD,CAAYC,QAAQ,QAAQN,MAAO,CAC/BO,eAAgB3B,EAAKD,UAAY,eAAiB,OAClDC,EAAKF,MACT,kBAAC8B,EAAA,EAAD,CAAaJ,QATjB,WACIN,EAAWlB,EAAKH,MAQ0B,kBAAC,IAAD,S,QCAnCgC,MAdf,YAAwD,IAApCC,EAAmC,EAAnCA,MAAOb,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,WACvC,OACI,kBAACa,EAAA,EAAD,KACKD,EAAME,KAAI,SAAAhC,GAAI,OACX,kBAAC,EAAD,CACAiC,IAAKjC,EAAKH,GACVG,KAAMA,EACNiB,eAAgBA,EAChBC,WAAaA,SC+CdgB,MApDf,WAAgB,IAAD,EACctC,mBAAS,IADvB,mBACLkC,EADK,KACEK,EADF,KAwCb,OArCAC,qBAAU,WAET,IAAMC,EAAgBC,KAAKC,MAAMC,aAAaC,QAPvB,0BAQpBJ,GACDF,EAASE,KAEV,IAEFD,qBAAU,WACRI,aAAaE,QAdS,wBAciBJ,KAAKK,UAAUb,MACrD,CAACA,IA4BF,yBAAK5B,UAAU,OACX,kBAACuB,EAAA,EAAD,CAAYL,MAAQ,CAACwB,QAAQ,IAAKlB,QAAQ,MAA1C,eACA,kBAAC,EAAD,CAAU/B,QA1BhB,SAAiBK,GACfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA0Bf,kBAAC,EAAD,CAAUA,MAAOA,EAChBb,eAxBP,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAGA,EAAKH,KAAOA,EACb,2BACOG,GADP,IAEID,WAAYC,EAAKD,YAGhBC,OAgBNkB,WAXP,SAAoBrB,GAClBsC,EAASL,EAAMe,QAAO,SAAA7C,GAAI,OAAIA,EAAKH,KAAOA,WC/B1BiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ad5e0580.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\"\r\nimport * as uuid from \"uuid\"\r\n\r\nfunction ToDoForm({ addToDo }){\r\n    const [todo,setToDo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false\r\n    });\r\n\r\n    function handleTaskInputChange(e){\r\n        setToDo({ ...todo, task: e.target.value });\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        if(todo.task.trim()){\r\n            addToDo({ ...todo, id: uuid.v4()});\r\n            setToDo({ ...todo, task: \"\"});\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <TextField label=\"Enter task\" name=\"task\" type=\"text\" value={todo.task} onChange = {handleTaskInputChange}></TextField>\r\n            <Button type=\"submit\"> Submit </Button>\r\n        </form>\r\n    )\r\n}\r\nexport default ToDoForm;","import React from \"react\";\r\nimport {Checkbox, IconButton, ListItem, Typography} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nfunction ToDo({ todo, toggleComplete, removeTodo }){\r\n\r\n    function handleCheckboxClick(){\r\n        toggleComplete(todo.id);\r\n    }\r\n    function handleRemoveClick(){\r\n        removeTodo(todo.id);\r\n    }\r\n    return(\r\n        <ListItem style={{display: \"flex\"}}>\r\n        <Checkbox checked = {todo.completed}  onClick={handleCheckboxClick}></Checkbox>\r\n        <Typography variant=\"body1\" style={{\r\n            textDecoration: todo.completed ? \"line-through\" : null\r\n        }}>{todo.task}</Typography>\r\n        <IconButton  onClick={handleRemoveClick} ><CloseIcon></CloseIcon></IconButton>\r\n        </ListItem>\r\n    );\r\n}\r\nexport default ToDo;","import React from \"react\";\r\nimport ToDo from \"./Todo\";\r\nimport {List} from \"@material-ui/core\"\r\n\r\nfunction ToDoList({ todos, toggleComplete, removeTodo}){\r\n    return(\r\n        <List>\r\n            {todos.map(todo => (\r\n                <ToDo \r\n                key={todo.id} \r\n                todo={todo} \r\n                toggleComplete={toggleComplete}\r\n                removeTodo ={removeTodo}\r\n                ></ToDo>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\nexport default ToDoList;","import React, { useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport ToDoForm from \"./components/ToDoForm\"\r\nimport ToDoList from \"./components/ToDoList\"\r\nimport Typography from \"@material-ui/core/Typography\";\r\nconst LOCAL_STORAGE_KEY = \"react_todo_list_todos\"\r\n\r\nfunction App() {\r\n  const [ todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n   const storageTodos =  JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n   if(storageTodos){\r\n     setTodos(storageTodos)\r\n   }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n\r\n\r\n  function addToDo(todo){\r\n    setTodos([todo, ...todos]);\r\n  }\r\n\r\n  function toggleComplete(id){\r\n    setTodos(\r\n      todos.map(todo => {\r\n        if(todo.id === id){\r\n          return{\r\n              ...todo,\r\n              completed: !todo.completed\r\n          };\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  }\r\n\r\n  function removeTodo(id){\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <Typography style= {{padding:16}} variant=\"h1\">React To-Do</Typography>\r\n        <ToDoForm addToDo={addToDo}></ToDoForm>\r\n        <ToDoList todos={todos}\r\n         toggleComplete={toggleComplete}\r\n         removeTodo = {removeTodo}\r\n         ></ToDoList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}